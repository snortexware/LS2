## Overview

This code is for a table in a web app. It allows users to view, add, edit, and delete information about items (like customers).

### Step 1: Setting Up the State

- **What is State?**
    
    - Think of state as a way to store information that your app needs to remember. It’s like a box where you keep your toys.
- **Example**:
    
    javascript
    
    Copiar código
    
    `const [rows, setRows] = useState([]);`
    
    - This line creates a box (`rows`) that starts empty (`[]` means an empty list). The `setRows` function is how you change what’s inside the box.

### Step 2: Adding New Data

- **Function to Add Data**:
    
    javascript
    
    Copiar código
    
    `const handleSave = (pedido) => {     const newEntry = {         ...pedido,         id: nextId,     };     setRows([...rows, newEntry]);     setnextId(nextId + 1); };`
    
    - **What Happens Here?**
        - When you add new data (like a new customer), this function makes a new entry.
        - It takes the information you provided (`pedido`), and gives it a unique ID (`nextId`).
        - It then updates the `rows` box by adding this new entry to the existing list.

### Step 3: Editing Existing Data

- **Function to Edit Data**:
    
    javascript
    
    Copiar código
    
    `const handleEdit = (row) => {     setSelectedRow(row); };`
    
    - **What Happens Here?**
        - When you click "Edit" on a row, this function saves that specific row's data so you can change it later.

### Step 4: Saving Changes After Editing

- **Saving Edited Data**:
    
    javascript
    
    Copiar código
    
    `const handleSave = (pedido) => {     if (selectedRow) {         editRow(selectedRow.id, pedido);     } };`
    
    - **What Happens Here?**
        - This checks if you selected a row to edit.
        - If you did, it updates that row with the new information you entered.

### Step 5: Deleting Data

- **Function to Delete Data**:
    
    javascript
    
    Copiar código
    
    `const deleteRow = (id) => {     setRows(rows.filter(row => row.id !== id)); };`
    
    - **What Happens Here?**
        - When you click "Delete" on a row, this function removes that row from the `rows` list.
        - It keeps all other rows and only removes the one you selected.

### Step 6: Displaying Data in a Table

- **Creating the Table**:
    
    javascript
    
    Copiar código
    
    `<Table>     <thead>...</thead>     <tbody>         {rows.map((row) => (             <tr key={row.id}>                 <td>{row.codigoClienteAntigo}</td>                 ...             </tr>         ))}     </tbody> </Table>`
    
    - **What Happens Here?**
        - This creates a table where each row shows data.
        - `rows.map((row) => ...)` goes through each item in your `rows` box and creates a new row in the table for it.

### Step 7: Using a Modal for Input

- **Modal for Adding/Editing Data**:
    
    javascript
    
    Copiar código
    
    `{handleAbrir && (     <ModalTitular         onSave={handleSave}         handleClose={fechado}     /> )}`
    
    - **What Happens Here?**
        - When you want to add or edit a row, a pop-up (modal) appears.
        - This modal has fields where you can type in new data. When you’re done, you click a button to save it.